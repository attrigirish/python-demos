Lambda Expression, map, filter and reduce functions


Lambda Expressions : Shorthand expressions for Functions

Syntax:

lambda (func_arguments) : function_definition


e.g.

def Sum(a,b):
	return a+b

or

lambda (a,b) : a+b


Write a lambda expression to find the largest number

lambda a,b : a if a>b else b



map() : Map applies a function to all the items in an list.

Syntax:

map(function_to_apply,input_list)


lst=[5,10,15,20,25]

Write a program to multiply each element of a list with 5.

#Without Map

lst=[5,10,15,20,25]

for i in range(5):
	lst[i]=lst[i]*5


#With Map

lst=[5,10,15,20,25]
lst=list(map(lambda x:x*5,lst))
print(lst)


Write a declaration to increment all odd number by 1 in a list of 5 elements

lst=[5,10,15,20,25]
lst=list(map(lambda x: x if x%2==0 else x+1, lst))
print(lst)





filter() : Applies a function to all elements in the list and return matching values only.

Syntax:

filter(function_to_apply,input_list)

e.g.


lst=[543,765,435,492,534,125]
#To Get All Values above 500
lst=list(filter(lambda x:x>500, lst))



Write a filter statement to get all product details whose price value is above 50000 (Source : Internet)



Reduce : Reduce is a really useful function for performing some computation on a list and returning the result. It applies a rolling computation to sequential pairs of values in a list. For example, if you wanted to compute the product of a list of integers.


reduce(function_to_apply, list)

e.g.

from functools import reduce

lst=[1,2,3,4,5]
sum=reduce(lambda a,b: a+b, lst)
print(sum)


lst=[5,7,3,5,3]
large=reduce(lambda a,b: a if a>b else b, lst)
print(large)
















